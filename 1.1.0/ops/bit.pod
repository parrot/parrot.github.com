=head1 NAME

bit.ops - Bitwise Opcodes

=head1 DESCRIPTION

Operations that deal with bits directly, either individually
or in groups.

The variant with an appended B<s> like B<bands> work on strings.

=over 4


=cut

=item B<band>(inout INT, in INT)

=item B<band>(invar PMC, in INT)

=item B<band>(invar PMC, invar PMC)

Set the bits of $1 according to the B<and> of the corresponding bits
from $1 and $2.

=item B<band>(out INT, in INT, in INT)

=item B<band>(invar PMC, invar PMC, in INT)

=item B<band>(invar PMC, invar PMC, invar PMC)

Set the bits of $1 according to the B<and> of the corresponding bits
from $2 and $3.


=cut

=item B<bands>(inout STR, in STR)

=item B<bands>(invar PMC, in STR)

=item B<bands>(invar PMC, invar PMC)

Set the bits of $1 according to the B<and> of the corresponding bits
from $1 and $2.

=item B<bands>(out STR, in STR, in STR)

=item B<bands>(invar PMC, invar PMC, in STR)

=item B<bands>(invar PMC, invar PMC, invar PMC)

Set the bits of $1 according to the B<and> of the corresponding bits
from $2 and $3.


=cut

=item B<bnot>(inout INT)

=item B<bnot>(invar PMC)

Sets $1 to C<bitwise not> $1 inplace.

=item B<bnot>(out INT, in INT)

=item B<bnot>(out PMC, invar PMC)


=cut

=item B<bnots>(inout STR)

=item B<bnots>(invar PMC)

=item B<bnots>(out STR, in STR)

=item B<bnots>(out PMC, invar PMC)


=cut

=item B<bor>(inout INT, in INT)

=item B<bor>(invar PMC, in INT)

=item B<bor>(invar PMC, invar PMC)

Set the bits of $1 according to the B<or> of the corresponding bits
from $1 and $2.

=item B<bor>(out INT, in INT, in INT)

=item B<bor>(invar PMC, invar PMC, in INT)

=item B<bor>(invar PMC, invar PMC, invar PMC)

Set the bits of $1 according to the B<or> of the corresponding bits
from $2 and $3.


=cut

=item B<bors>(inout STR, in STR)

=item B<bors>(invar PMC, in STR)

=item B<bors>(invar PMC, invar PMC)

Set the bits of $1 according to the B<or> of the corresponding bits
from $1 and $2.

=item B<bors>(out STR, in STR, in STR)

=item B<bors>(invar PMC, invar PMC, in STR)

=item B<bors>(invar PMC, invar PMC, invar PMC)

Set the bits of $1 according to the B<or> of the corresponding bits
from $2 and $3.


=cut

=item B<shl>(inout INT, in INT)

=item B<shl>(invar PMC, in INT)

=item B<shl>(invar PMC, invar PMC)

Shift left $1 by $2 bits.

=item B<shl>(out INT, in INT, in INT)

=item B<shl>(invar PMC, invar PMC, in INT)

=item B<shl>(invar PMC, invar PMC, invar PMC)

Set $1 to the value of $2 shifted left by $3 bits.


=cut

=item B<shr>(inout INT, in INT)

=item B<shr>(invar PMC, in INT)

=item B<shr>(invar PMC, invar PMC)

Shift right $1 by $2 bits.

=item B<shr>(out INT, in INT, in INT)

=item B<shr>(invar PMC, invar PMC, in INT)

=item B<shr>(invar PMC, invar PMC, invar PMC)

Set $1 to the value of $2 shifted right by $3 bits.


=cut

=item B<lsr>(out INT, in INT)

=item B<lsr>(invar PMC, in INT)

=item B<lsr>(invar PMC, invar PMC)

Shift $1 logically shifted right by $2 bits.

=item B<lsr>(out INT, in INT, in INT)

=item B<lsr>(invar PMC, invar PMC, in INT)

=item B<lsr>(invar PMC, invar PMC, invar PMC)

Set $1 to the value of $2 logically shifted right by $3 bits.


=cut

=item B<rot>(out INT, in INT, in INT, inconst INT)

Rotate $2 left or right by $3 and place result in $1.
$4 is the amount of bits to rotate, 32 bit on a 32-bit CPU and 32 or 64
on a 64-bit CPU. If the rotate count is negative a rotate right by ($3+$4)
is performed.


=cut

=item B<bxor>(inout INT, in INT)

=item B<bxor>(invar PMC, in INT)

=item B<bxor>(invar PMC, invar PMC)

Set the bits of $1 according to the B<xor> of the corresponding bits
from $1 and $2.

=item B<bxor>(out INT, in INT, in INT)

=item B<bxor>(invar PMC, invar PMC, in INT)

=item B<bxor>(invar PMC, invar PMC, invar PMC)

Set the bits of $1 according to the B<xor> of the corresponding bits
from $2 and $3.


=cut

=item B<bxors>(inout STR, in STR)

=item B<bxors>(invar PMC, in STR)

=item B<bxors>(invar PMC, invar PMC)

Set the bits of $1 according to the B<xor> of the corresponding bits
from $1 and $2.

=item B<bxors>(out STR, in STR, in STR)

=item B<bxors>(invar PMC, invar PMC, in STR)

=item B<bxors>(invar PMC, invar PMC, invar PMC)

Set the bits of $1 according to the B<xor> of the corresponding bits
from $2 and $3.


=cut

=back


=cut

=head1 COPYRIGHT

Copyright (C) 2001-2009, Parrot Foundation.

=head1 LICENSE

This program is free software. It is subject to the same license
as the Parrot interpreter itself.


=cut

