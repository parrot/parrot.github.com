.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PARROT 1"
.TH PARROT 1 "2014-11-18" "perl v5.14.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
parrot \- Parrot Virtual Machine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBparrot\fR [\-options] <file> [arguments ...]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Parrot is a virtual machine designed to efficiently compile and execute
bytecode for dynamic languages. Parrot currently hosts a variety of language
implementations in various stages of completion, including Tcl, Javascript,
Ruby, Lua, Scheme, \s-1PHP,\s0 Python, Perl 6, \s-1APL,\s0 and a .NET bytecode translator.
Parrot is not about parrots, but we are rather fond of them, for obvious
reasons.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h\fR" 4
.IX Item "-h"
.PD 0
.IP "\fB\-\-help\fR         Print the option summary on the command line." 4
.IX Item "--help Print the option summary on the command line."
.IP "\fB\-V\fR" 4
.IX Item "-V"
.IP "\fB\-\-version\fR      Print version information and exit." 4
.IX Item "--version Print version information and exit."
.IP "\fB\-I\fR" 4
.IX Item "-I"
.ie n .IP "\fB\-\-include\fR      Add ""path"" to the include search path." 4
.el .IP "\fB\-\-include\fR      Add \f(CWpath\fR to the include search path." 4
.IX Item "--include Add path to the include search path."
.IP "\fB\-L\fR" 4
.IX Item "-L"
.ie n .IP "\fB\-\-library\fR      Add ""path"" to the library search path." 4
.el .IP "\fB\-\-library\fR      Add \f(CWpath\fR to the library search path." 4
.IX Item "--library Add path to the library search path."
.IP "\fB\-\-hash\-seed\fR [hexnum]" 4
.IX Item "--hash-seed [hexnum]"
.PD
Sets the hash seed to the specified value. This option is useful for debugging intermittent
failures, but should \fInot\fR be used in production.  For more information about this option,
\&\fIsee\fR \fIdocs/dev/profiling.pod\fR, \fIdocs/project/hacking_tips.pod\fR, \fIdocs/running.pod\fR,
and \fIdocs/submissions.pod\fR.
.IP "\fB\-X\fR" 11
.IX Item "-X"
.PD 0
.ie n .IP "\fB\-\-dynext\fR       Add ""path"" to the dynamic extension search path." 11
.el .IP "\fB\-\-dynext\fR       Add \f(CWpath\fR to the dynamic extension search path." 11
.IX Item "--dynext Add path to the dynamic extension search path."
.PD
.SS "Run core options"
.IX Subsection "Run core options"
These options select the runcore, which is useful for performance tuning and debugging.  For more
information about these options, \fIsee\fR the \*(L"About runcores\*(R" section in \fIdocs/running.pod\fR.
.IP "\fB\-R\fR" 4
.IX Item "-R"
.PD 0
.IP "\fB\-\-runcore\fR [\s-1CORE\s0]" 4
.IX Item "--runcore [CORE]"
.PD
Select the runcore. The following cores are available in Parrot, but not all
may be available on your system:
.Sp
.Vb 2
\&  fast           bare\-bones core without bounds\-checking or
\&                 context\-updating (default)
\&
\&  slow, bounds   bounds checking core
\&
\&  trace          bounds checking core with trace info
\&                 (see \*(Aqparrot \-\-help\-debug\*(Aq)
\&
\&  profiling      see F<docs/dev/profiling.pod>
\&
\&  subprof        subroutine\-level profiler
\&                 (see POD in F<src/runcore/subprof.c>)
.Ve
.IP "\fB\-p\fR" 4
.IX Item "-p"
.PD 0
.IP "\fB\-\-profile\fR      Run with the slow core and print an execution profile." 4
.IX Item "--profile Run with the slow core and print an execution profile."
.IP "\fB\-t\fR" 4
.IX Item "-t"
.IP "\fB\-\-trace\fR        Run with the slow core and print trace information to \fBstderr\fR." 4
.IX Item "--trace Run with the slow core and print trace information to stderr."
.PD
\&\fISee\fR \f(CW\*(C`parrot \-\-help\-debug\*(C'\fR for available flag bits.
.SS "\s-1VM\s0 options"
.IX Subsection "VM options"
.IP "\fB\-D\fR" 4
.IX Item "-D"
.PD 0
.IP "\fB\-\-parrot\-debug\fR[=HEXFLAGS]" 4
.IX Item "--parrot-debug[=HEXFLAGS]"
.PD
Turn on interpreter debug flag.  \fISee\fR \f(CW\*(C`parrot \-\-help\-debug\*(C'\fR for available flag bits.
.IP "\fB\-\-help\-debug\fR   Print the summary of debugging and tracing flag bits." 4
.IX Item "--help-debug Print the summary of debugging and tracing flag bits."
.PD 0
.IP "\fB\-w\fR" 4
.IX Item "-w"
.IP "\fB\-\-warnings\fR     Turn on warnings." 4
.IX Item "--warnings Turn on warnings."
.PD
\&\fISee\fR \f(CW\*(C`parrot \-\-help\-debug\*(C'\fR for available flag bits.
.IP "\fB\-G\fR" 4
.IX Item "-G"
.PD 0
.IP "\fB\-\-no\-gc\fR        Turn off \s-1GC.\s0" 4
.IX Item "--no-gc Turn off GC."
.PD
This may prove useful for finding GC-related bugs.
.RS 4
.IP "Note:" 11
.IX Item "Note:"
Do not use this option for longer running programs: since memory is no longer recycled, it may
quickly become exhausted.
.RE
.RS 4
.RE
.IP "\fB\-g\fR" 4
.IX Item "-g"
.PD 0
.IP "\fB\-\-gc\fR [GC\-type]" 4
.IX Item "--gc [GC-type]"
.PD
.PP
\fI\s-1GC MS2\s0 options\fR
.IX Subsection "GC MS2 options"
.IP "\fB\-\-gc\-dynamic\-threshold\fR=percentage" 4
.IX Item "--gc-dynamic-threshold=percentage"
Maximum memory wasted by \s-1GC\s0
.IP "\fB\-\-gc\-min\-threshold\fR=Kb" 4
.IX Item "--gc-min-threshold=Kb"
.PP
\fI\s-1GC GMS\s0 options\fR
.IX Subsection "GC GMS options"
.IP "\fB\-\-gc\-nursery\-size\fR=percent of system" 4
.IX Item "--gc-nursery-size=percent of system"
Size of gen0 (default 2)
.IP "\fB\-\-gc\-debug\fR     Turn on \s-1GC \s0(Garbage Collection) debugging." 4
.IX Item "--gc-debug Turn on GC (Garbage Collection) debugging."
This imposes some stress on the \s-1GC\s0 subsystem and can considerably slow
down execution.
.IP "\fB\-\-leak\-test|\-\-destroy\-at\-end\fR" 4
.IX Item "--leak-test|--destroy-at-end"
Free all memory of the last interpreter.  This is useful when running leak
checkers.
.IP "\fB\-.\fR" 4
.IX Item "-."
.PD 0
.IP "\fB\-\-wait\fR         Read a keystroke before starting." 4
.IX Item "--wait Read a keystroke before starting."
.PD
This is useful when you want to attach a debugger on platforms such as Windows.
.IP "\fB\-\-runtime\-prefix\fR" 4
.IX Item "--runtime-prefix"
Print the runtime prefix path and exit.
.IP "\-\-numthreads <number>" 4
.IX Item "--numthreads <number>"
Overrides the automatically detected number of \s-1CPU\s0 cores to set the
number of \s-1OS\s0 threads. Minimum number: 2
.SS "Compiler options"
.IX Subsection "Compiler options"
.IP "\fB\-O\fR[level]" 4
.IX Item "-O[level]"
Valid optimizer levels: \f(CW\*(C`\-O\*(C'\fR, \f(CW\*(C`\-O1\*(C'\fR, \f(CW\*(C`\-O2\*(C'\fR, \f(CW\*(C`\-Op\*(C'\fR
.Sp
\&\-O1 enables the pre_optimizer, runs before control flow graph (\s-1CFG\s0) is built.
It includes strength reduction and rewrites certain if/branch/label constructs.
.Sp
\&\-O2 runs afterwards, handles constant propagation, jump optimizations,
removal of unused labels and dead code.
.Sp
\&\-Op applies \-O2 to pasm files also.
.Sp
The old options \-Oc (tailcall) and \-Oj are currently ineffective.
.Sp
\&\-O defaults to \-O1.
.IP "\fB\-d\fR[=HEXFLAGS]" 4
.IX Item "-d[=HEXFLAGS]"
.PD 0
.IP "\fB\-\-imcc\-debug\fR[=HEXFLAGS]" 4
.IX Item "--imcc-debug[=HEXFLAGS]"
.PD
Turn on compiler debug flags.  \fISee\fR \f(CW\*(C`parrot \-\-help\-debug\*(C'\fR for available flag bits.
.IP "\fB\-E\fR" 4
.IX Item "-E"
.PD 0
.IP "\fB\-\-pre\-process\-only\fR" 4
.IX Item "--pre-process-only"
.PD
Preprocess source file (expand macros) and print result to \f(CW\*(C`stdout\*(C'\fR:
.Sp
.Vb 2
\&  $> parrot \-E t/op/macro_10.pasm
\&  $> parrot \-E t/op/macro_10.pasm | parrot \-\- \-
.Ve
.IP "\fB\-o\fR" 4
.IX Item "-o"
.PD 0
.IP "\fB\-\-output\fR=FILE  Act like an assembler, but do not execute the code," 4
.IX Item "--output=FILE Act like an assembler, but do not execute the code,"
.PD
unless the \fB\-r\fR is supplied as well. If 'outputfile' ends with \fI.pbc\fR,
\&'parrot' will write a \s-1PBC\s0 file. If it ends with \fI.pasm\fR, 'parrot' will output
a \s-1PASM\s0 file, even from \s-1PASM\s0 input.
.IP "\fB\-\-output\-pbc\fR   Act like an assembler, but always output bytecode," 4
.IX Item "--output-pbc Act like an assembler, but always output bytecode,"
even if the output file does not end in \fI.pbc\fR
.IP "\fB\-a\fR" 4
.IX Item "-a"
.PD 0
.ie n .IP "\fB\-\-pasm\fR         Assume \s-1PASM\s0 input on ""stdin""." 4
.el .IP "\fB\-\-pasm\fR         Assume \s-1PASM\s0 input on \f(CWstdin\fR." 4
.IX Item "--pasm Assume PASM input on stdin."
.IP "\fB\-c\fR" 4
.IX Item "-c"
.ie n .IP "\fB\-\-pbc\fR          Assume \s-1PBC\s0 file on ""stdin"" and execute it." 4
.el .IP "\fB\-\-pbc\fR          Assume \s-1PBC\s0 file on \f(CWstdin\fR and execute it." 4
.IX Item "--pbc Assume PBC file on stdin and execute it."
.PD
\&\s-1NOTE:\s0 If whitespace separates the \fB\-d\fR switch from the argument, the argument
\&\fImust\fR start with a number, \fIi.e.\fR, a decimal digit.
.IP "\fB\-r\fR" 4
.IX Item "-r"
.PD 0
.ie n .IP "\fB\-\-run\-pbc\fR      Only useful after ""\-o"" or ""\-\-output\-pbc""." 4
.el .IP "\fB\-\-run\-pbc\fR      Only useful after \f(CW\-o\fR or \f(CW\-\-output\-pbc\fR." 4
.IX Item "--run-pbc Only useful after -o or --output-pbc."
.PD
Execute the program from the compiled in-memory image. If two \f(CW\*(C`\-r\*(C'\fR options are
supplied, the \fI.pbc\fR file is read from disc and executed. This is needed,
primarily, for tests.
.IP "\fB\-y\fR" 4
.IX Item "-y"
.PD 0
.IP "\fB\-\-yydebug\fR      Turn on yydebug in \fIyacc\fR/\fIbison\fR." 4
.IX Item "--yydebug Turn on yydebug in yacc/bison."
.IP "\fB\-v\fR" 4
.IX Item "-v"
.IP "\fB\-\-verbose\fR      Turn on compiler verbosity." 4
.IX Item "--verbose Turn on compiler verbosity."
.PD
.SS "<file>"
.IX Subsection "<file>"
If the file ends in \fI.pbc\fR it will be interpreted immediately.
.PP
If the file ends in \fI.pasm\fR, then it is parsed as \s-1PASM\s0 code. Otherwise, it is
parsed as \s-1PIR\s0 code. In both cases, it will then be executed, unless the \f(CW\*(C`\-o\*(C'\fR
flag was supplied.
.PP
If the \f(CW\*(C`file\*(C'\fR is a single dash, input from \f(CW\*(C`stdin\*(C'\fR is read.
.SS "[arguments ...]"
.IX Subsection "[arguments ...]"
Optional arguments passed to the running program as \s-1ARGV.\s0 The program is
assumed to know what to do with the arguments.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\s-1PARROT_RUNTIME\s0" 4
.IX Item "PARROT_RUNTIME"
If this environment variable is set, parrot will use this path as its runtime
prefix instead of the compiled-in path.  This is useful if you want to execute
a version of parrot different from the one on the \*(L"compiled-in\*(R" path.
.IP "\s-1PARROT_GC_DEBUG\s0" 4
.IX Item "PARROT_GC_DEBUG"
Turn on the \fI\-\-gc\-debug\fR flag.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&'docs/running.pod'           Additional information on command line options.
.PP
http://www.parrot.org/       The official Parrot web site.
.PP
http://docs.parrot.org/      Parrot's official documentation site.
.PP
http://parrot.github.com/    An alternative documentation site.
.SH "REPORTING BUGS"
.IX Header "REPORTING BUGS"
For information on how to submit a bug report, \fIsee\fR \fIdocs/submissions.pod\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
Parrot is a product of the contributions of a great many people.  For a list of
most of these people, \fIsee\fR \fI\s-1CREDITS\s0\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2001\-2014, Parrot Foundation.
