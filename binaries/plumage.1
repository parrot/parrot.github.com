.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.26)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PLUMAGE 1"
.TH PLUMAGE 1 "2014-07-08" "perl v5.6.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
plumage.pod \- Parrot Plumage
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
plumage [<options>] <command> [<arguments>]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Parrot Plumage is the Parrot Virtual Machine module ecosystem.  It includes
tools to search metadata, handle dependencies, install modules, and so forth.
.SS "Command line options"
.IX Subsection "Command line options"
For help about options and commands you can type:
.PP
.Vb 1
\&    plumage usage
.Ve
.PP
Or to use command line option help :
.PP
.Vb 2
\&    plumage \-h
\&    plumage \-\-help
.Ve
.PP
To read additional config file use :
.PP
.Vb 1
\&    \-c
.Ve
.PP
Or if you want to use specific path use :
.PP
.Vb 1
\&   \-\-config\-file=<path>
.Ve
.PP
To ignore any failed build stages use :
.PP
.Vb 2
\&    \-i
\&    \-\-ignore\-fail
.Ve
.PP
To ignore fails only for specific stage use :
.PP
.Vb 1
\&    \-\-ignore\-fail=<stage>
.Ve
.PP
You can repeat to select more than one stage.
Not to ignore fail in specific stage use :
.PP
.Vb 1
\&    \-\-ignore\-fail=<stage>=0
.Ve
.SS "Command line commands"
.IX Subsection "Command line commands"
.SS "General commands"
.IX Subsection "General commands"
To start interactive command-line interface (default with no commands) use :
.PP
.Vb 1
\&    cli
.Ve
.PP
To display Plumage version and copyright statement use :
.PP
.Vb 1
\&    version
.Ve
.PP
To display help message on specific command use :
.PP
.Vb 1
\&    help    [<command>]
.Ve
.SS "Query metadata and project info"
.IX Subsection "Query metadata and project info"
To list all known projects use :
.PP
.Vb 1
\&    projects
.Ve
.PP
To show status of specific project use :
.PP
.Vb 1
\&    status  [<project>]
.Ve
.PP
To display detailed description of specific project use :
.PP
.Vb 1
\&    info    <project>
.Ve
.PP
To dispay \s-1JSON\s0 metadata for specific project use :
.PP
.Vb 1
\&    metadata    <project>
.Ve
.PP
To Show dependencies for specific project use :
.PP
.Vb 1
\&    show\-deps   <project>
.Ve
.PP
To display top directory for specific project use :
.PP
.Vb 1
\&    project\-dir <project>
.Ve
.SS "Perform actions on a project"
.IX Subsection "Perform actions on a project"
To downloads source code for specific project use :
.PP
.Vb 1
\&    fetch   <project>
.Ve
.PP
To update source code for specific project use (it fall bacj to fetch) :
.PP
.Vb 1
\&    update  <project>
.Ve
.PP
To configure source code for specific project use (runs 'update' furst) :
.PP
.Vb 1
\&    configure   <project>
.Ve
.PP
To build specific project in current directory (runs 'configure' first) :
.PP
.Vb 1
\&    build   <project>
.Ve
.PP
To run test suite for specific project use (runs 'build' first) :
.PP
.Vb 1
\&    test    <project>
.Ve
.PP
To send test result po Parrot's Smolder server use (runs 'build' first) :
.PP
.Vb 1
\&    smoke   <project>
.Ve
.PP
To install specific project use (runs 'test' first) :
.PP
.Vb 1
\&    install <project>
.Ve
.PP
To uninstall specific project from system use (not always available) :
.PP
.Vb 1
\&    uninstall   <project>
.Ve
.PP
To perform basic cleanup of source tree for specific project use :
.PP
.Vb 1
\&    clean   <project>
.Ve
.PP
To remove all generated files during the build process for specific project use :
.PP
.Vb 1
\&    reaclean    <project>
.Ve
.SH "HELP"
.IX Header "HELP"
For more help or any other question you go to <http://parrot.org> or
<http://github.com/parrot/parrot>.Or you can send email to 'parrot\-dev@parrot.org'.
You are also invited to join the #parrot \s-1IRC\s0 channel on irc.parrot.org.
