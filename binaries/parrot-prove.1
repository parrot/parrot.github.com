.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PARROT-PROVE 1"
.TH PARROT-PROVE 1 "2014-10-21" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
parrot\-prove \- Prove is a PIR\-based TAP (Test Anything Protocol) Harness
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
parrot-prove [option] [files]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
It eats test output (i.e. is a \s-1TAP\s0 consumer) and tells humans if the
test suite passed, and if not, which kind of pretty colors of smoke
came out. It is mostly equivalent to 'prove' from Perl 5.
.SS "Command line boolean options"
.IX Subsection "Command line boolean options"
To print all test lines use :
.PP
.Vb 2
\&    \-v
\&    \-\-verbose
.Ve
.PP
To run the tests in random order use :
.PP
.Vb 2
\&    \-s
\&    \-\-shuffle
.Ve
.PP
To show failed tests use :
.PP
.Vb 2
\&    \-f
\&    \-\-failures
.Ve
.PP
To show comments use :
.PP
.Vb 2
\&    \-o
\&    \-\-comments
.Ve
.PP
To ignore exit status from test scripts use :
.PP
.Vb 1
\&    \-\-ignore\-exit
.Ve
.PP
To merge test scripts \s-1STDERR\s0 with their \s-1STDOUT\s0 use :
.PP
.Vb 2
\&    \-m
\&    \-\-merge
.Ve
.PP
To run tests in reverse order use :
.PP
.Vb 1
\&    \-\-reverse
.Ve
.PP
To suppress some test output while running tests use :
.PP
.Vb 2
\&    \-q
\&    \-\-quiet
.Ve
.PP
To print only summary result use :
.PP
.Vb 2
\&    \-Q
\&    \-\-QUIET
.Ve
.PP
To show only results with \s-1TODO\s0 or \s-1SKIP\s0 directives use :
.PP
.Vb 1
\&    \-\-directives
.Ve
.PP
To normalize \s-1TAP\s0 output in verbose output use :
.PP
.Vb 1
\&    \-\-normalize
.Ve
.PP
To display help use :
.PP
.Vb 2
\&    \-h
\&    \-\-help
.Ve
.PP
To display version use :
.PP
.Vb 2
\&    \-v
\&    \-\-version
.Ve
.SS "Command line options that take arguments"
.IX Subsection "Command line options that take arguments"
To interpreter to run the tests (' ' for compiled tests.) use :
.PP
.Vb 2
\&    \-e
\&    \-\-exec
.Ve
.PP
To store the resulting \s-1TAP\s0 in an archive file use :
.PP
.Vb 2
\&    \-a
\&    \-\-archive
.Ve
.SH "HELP"
.IX Header "HELP"
For more help or any other question you go to <http://parrot.org> or
<http://github.com/parrot/parrot>.Or you can send email to 'parrot\-dev@parrot.org'.
You are also invited to join the #parrot \s-1IRC\s0 channel on irc.parrot.org.
